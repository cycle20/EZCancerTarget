[["index.html", "EZCancerTarget Documentation Chapter 1 Introduction 1.1 Running with no installation", " EZCancerTarget Documentation David Dora MD, PhD; Timea Dora MS; Gabor Szegvari MS; Csongor Gerdán BS; Zoltan Lohinai MD, PhD 2022-08-20 Chapter 1 Introduction EZCancerTarget provides detailed biological information on the selected set of target molecules using open-access databases, such as UniProt, GeneCards, Gene Ontology and STRING. This way, the user receives a concise summary on the biological relevance of every target, that is explicitly important for researchers who are not experts in molecular biology. 1.1 Running with no installation 1.1.1 Input Google Spreadsheet EZCancerTarget - Target INPUT table - the easiest way to provide input dataset to EZCancerTarget workflow and start it on GitHub. Its access requires a Google account, an editor permission, cooperations with other users to avoid unintended changes of initial dataset. 1.1.2 Result page and workflow status check Result of recent targets: index.target.with.data.html Baseline version of result page Workflow results - list of each workflow run on GitHub. "],["installation-guide.html", "Chapter 2 Installation Guide 2.1 Requirements 2.2 Installation Steps", " Chapter 2 Installation Guide 2.1 Requirements 2.1.1 R environment EZCancerTarget are collection of R scripts. Its requirement is an installed and working R environment. You can find more details on CRAN about R setup: https://cran.r-project.org/bin/windows/base/ Linux and macOS users can find download and installation instructions on these pages and can consult with their system-sepcific package management tools: https://cran.r-project.org/doc/manuals/r-release/R-admin.html https://cran.r-project.org/bin/linux/ https://cran.r-project.org/bin/macosx/ 2.1.2 CLUE.IO API Key CLUE_USER_KEY environment variable must be set on the host operating system. This key is user-specific and it can be obtained after registration on CLUE.IO (https://clue.io). 2.2 Installation Steps Download EZCancerTarget latest ZIP bundle Extract its content into a folder: for example C:\\EzCancerTarget Open a terminal window and enter into this directory cd C:\\EzCancerTarget Start R here by the R command Similar output should display: R version 4.1.1 (2021-08-10) -- &quot;Kick Things&quot; Copyright (C) 2021 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type &#39;license()&#39; or &#39;licence()&#39; for distribution details. Natural language support but running in an English locale R is a collaborative project with many contributors. Type &#39;contributors()&#39; for more information and &#39;citation()&#39; on how to cite R or R packages in publications. Type &#39;demo()&#39; for some demos, &#39;help()&#39; for on-line help, or &#39;help.start()&#39; for an HTML browser interface to help. Type &#39;q()&#39; to quit R. # Bootstrapping renv 0.15.2 -------------------------------------------------- * Downloading renv 0.15.2 ... OK * Installing renv 0.15.2 ... Done! * Successfully installed and loaded renv 0.15.2. * Project &#39;~/EZCancerTarget-main&#39; loaded. [renv 0.15.2] * The project library is out of sync with the lockfile. * Use `renv::restore()` to install packages recorded in the lockfile. Type the suggested command to install EZCancerTarget dependencies and chooes yes at prompted question . It will take a while: &gt; renv::restore() The following package(s) will be updated: # CRAN =============================== - R6 [* -&gt; 2.5.1] - askpass [* -&gt; 1.1] - assertthat [* -&gt; 0.2.1] - bit [* -&gt; 4.0.4] - bit64 [* -&gt; 4.0.5] - cellranger [* -&gt; 1.1.0] - cli [* -&gt; 3.1.1] - clipr [* -&gt; 0.7.1] - cpp11 [* -&gt; 0.4.2] - crayon [* -&gt; 1.4.2] - curl [* -&gt; 4.3.2] . . . Do you want to proceed? [y/N]: y * Querying repositories for available source packages ... Done! Retrieving &#39;https://cloud.r-project.org/src/contrib/R6_2.5.1.tar.gz&#39; ... OK [downloaded 61.9 Kb in 0.3 secs] Retrieving &#39;https://cloud.r-project.org/src/contrib/askpass_1.1.tar.gz&#39; ... OK [downloaded 5.6 Kb in 0 secs] Retrieving &#39;https://cloud.r-project.org/src/contrib/sys_3.4.tar.gz&#39; ... . . . Installing whisker [0.4] ... OK [built from source] Moving whisker [0.4] into the cache ... OK [moved to cache in 0.64 milliseconds] "],["methods.html", "Chapter 3 Methods 3.1 Overview 3.2 clue.R and dataPatch.R scripts 3.3 dataPatch.R functions 3.4 renderWebPage.R script 3.5 Presentation layer", " Chapter 3 Methods 3.1 Overview EZCancerTarget fetches its input from a simple data source. It can be a TSV file in case of running scripts on user-controlled computer. Another option is updating a shared Google Spreadsheet that is processed by workflow scripts on GitHub. EZCancerTarget load data from clue.io, then download data from other sources: FDA Label service, PubMed, EMA, ChEMBL, PubChem. After data collection it generates a user-friendly report file and some summary output data file. The report HTML file can be opened by a browser. If the workflow runs on GitHub, it will deploy the report file as a public GitHub web page. 3.2 clue.R and dataPatch.R scripts Target inclusion/exclusion depends on search results from a clue.io query. EZCancerTarget consists of 3 separate R scripts. The first script - clue.R - calls various clue.io REST API endpoints to build up a result table. If the main API call does not find any component for a target, that target will not be involved in further processing steps since no known drug repurposing approaches are available in clue.io. clue.R looks up the input target list in two ways. First, it tries to access a shared Google Sheet file. It requires a unique “key” (a token) given to clue.R via a simple environmental variable. If this secret key is available for the script, it authenticates by gargle package (Bryan et al, 2022) to access Google Sheet API services. Next, it reads the sheet and takes the values from its first three columns. An ID string also identifies the Google Sheet, and it is passed via an operating system environment. If there is no API key/Google Sheet identifier, then clue.R tries to load a TSV file from the INPUT directory of the EasyCancerTarget directory. clue.R merges the outputs of various clue.io API calls and saves the composing table into an RDS file. It is an R-specific data format to store and load R objects. At the next stage, dataPatch.R reads this RDS file and restores the data frame composed by clue.R. NOTE: R scripts of the application are located in the R directory of the source tree. 3.3 dataPatch.R functions 3.3.1 fdaLabel function dataPatch.R collects additional details from external resources. Most of them are used by clue.io itself, but gaps can occur in its dataset. For example EMA data is not included at all, so appending it is an improvement. Another plus is harvesting direct links to drug labels from the search interface of FDALabel. fdaLabel function implements this feature that contains several internal sub-functions (some of them are anonymous and vectorized). This function then sends a POST HTTP request to a specific FDALabel link - the same that is used by the human search interface to send a query. fdaLabel function uses pert_iname from clue.io as a search parameter and uses the following parameters to define the search criteria: document types of labeling types as documentTypeCodes: Human Rx 34391-3, Human OTC 34390-5, Vaccine 53404-0 labeling section: selectedLabelingType: 0, sectionTypeCode: Active Ingredient 2-55106-9 fdaLabel uses its internal function - getFDALabelResults - to send the query and interpret the HTTP response from the FDA service. The result may contain several duplications for a specific product. It is a consequence of FDA strict registration and regulation procedures (products are allowed for different time ranges or can be withdrawn, etc). The function uses a weighting method in order to reduce these duplications and return the most relevant items. fdaLabel function filters out products that are parts of aid kits by verifying presence of simple words first aid|kit|KIT in product names. It receives responses from the FDALabel service in JSON format. It parses, prioritizes and filters the list of returned drug products based on their market date and match-mode with pert_iname (exact, prefix, suffix, inner, not at all). This is a necessary step since the product list contains copies of drugs with only different dates. 3.3.2 pubMed function This function searches for the compound name received from clue.io and sends a search request to PubMed® service of National Center for Biotechnology Information (NCBI). It restricts the result set by including only clinical trials, meta-analyses, randomized controlled trials, reviews and systematic reviews. The results are ordered by the best match algorithm of PubMed®. Our function picks the top 3 of the result set and stores it in the global datatable. If there is no hit at all, dataPatch.R provides the used search URL and this search can be re-initiated and/or refined by users of EZCancerTarget. pubMed function uses a simple XPath query to extract PubMed® identifiers embedded into the resulting HTML source code. 3.3.3 ema function ema function complements the dataset with links to drugs’ overview pages on the website of European Medicines Agency (EMA). It downloads the summary table of approved drugs from the EMA site and lookups compounds by their ‘active substance’ property. Each drug has a URL to its overview page. The function pastes it into the dataset, if there is a hit by the name of the active substance. 3.3.4 xmlUniProt function This function collects data from the UniProt website. UniProt provides APIs to access and query its data. Easy to access the human readable contents in machine readable formats (for example XML, RDF, etc.). The usage of the UniProt website’s REST API is straightforward, since the input target list also contains UniProt identifiers. xmlUniProt extracts GO (Gene Ontology) molecular function and cellular component terms, STRING and Reactome references from the received XML data. These specific entries are stored in simple R lists and added to the data frame of already collected data in a new column: UniProtData. 3.4 renderWebPage.R script Its main function renderWebPage. It is responsible for rendering human-readable HTML documentation from “patched” data produced by dataPatch.R. This function iterates on rows of the input table created by dataPatch.R. It prepares a compounded, hierarchical data structure from the data table. This data structure helps to simplify data access from the template file which is an important substance of generating out HTML. 3.4.1 multivaluedCellsToHTML function A single compound can have multiple related values as elements of various resources. For example a compound can have two Mechanism of Action items (MoA); or a PubChem reference along with a DrugBank reference. These values have to be organized into the same row as the compound and items of the same categories must be displayed in a single table cell. multivaluedCellsToHTML function handles these cases. multivaluedCellsToHTML function uses these functions to compose corresponding URLs for each identifier from different data sources, including Chembl, PubChem and DrugBank. 3.5 Presentation layer A web browser is a “mandatory” software of each end user’s computer, so HTML is a clear choice to summarize, visualize and deliver collections of texts, images and hyperlinks. An important part of this rendering is building an HTML source file and populating it with the collected data in an user-friendly way. EZCancerTarget follows the popular Model-View-Controller design pattern even though it composes only static HTML output (View) from the data (Model) at this stage of the workflow. (NOTE: Previous actions and functionalities of the workflow can be interpreted as the Controller part of the MVC pattern.) 3.5.1 Templating Most web frameworks incorporate a templating system - as a result of their own solution or reusing a 3rd party component. These templating components are not tightly coupled with web services, any software can use their power. EZCancerTarget uses the whisker package (Salt and Hu 2015), which implements the Mustache template language. This approach excludes any occurance of program source code from the template code. It provides a strict separation for the View layer of EZCancerTarget. The structure of the rendered HTML output is based on Bootstrap components and their hierarchy. (NOTE: The current hierarchical structure and the content of components cannot support a responsible page design. EZCancerTarget output is tailored for desktop browsing.) 3.5.2 Dynamic request for STRING network image and a simple cache for HTML/XML contents Current functionality of EZCancerTarget is very similar to a web crawler. This kind of interaction with popular web servers requires respecting their policies controlled by their robots.txt files and described in public pages (FAQ, Usage Guideline, Terms of Service etc.) in order to minimize the load on their resources. Respecting their resources also helps to avoid a possible block or denied access from a well-protected website. EZCancerTarget uses an event-based method, a dynamic DOM modification from JavaScript (see scancer.js). If the user opens the STRING accordion of a target content, then the getSTRING function (set up as on onclick handler) inserts the image tag. The HTTP request of the STRING network image is initiated by the browser as it modified the Document Object Model and loads the missing/uncached image content to complete the rendering of the missing part of the document. It loads the images belonging to only the visited STRING panels of the document. The simple cache is also purposed to saving resources on websites. EZCancerTarget sends HTTP requests and receives HTTP responses via its getPageCached function. This function checks the cache.tsv file in the caching folder and returns the content immediately, when it has been already downloaded earlier. If the looked up entry is missing from the cache, the function downloads it and adds it to the cache. This does not just spare remote resources, but it speeds up the subsequent queries to a specific server since EZCancerTarget does not need to wait between politely after requests served by the cache-solution. All the R scripts and description of versions and runtime environment is freely accessible at: https://github.com/cycle20/EZCancerTarget. "],["construction-and-content.html", "Chapter 4 Construction and Content 4.1 Input Spreadsheet 4.2 Result Page", " Chapter 4 Construction and Content 4.1 Input Spreadsheet NOTE: This section describes input spreadsheet hosted on Google Drive. Each entry obtained from the search results in the interactive online platform of EZCancerTarget is referenced and has at least one scientific piece of evidence. Figure 5.1 shows a flowchart on the processing steps and workflow of EZCancerTarget. First, users of EZCancerTarget can start their workflow by opening the project’s starting page on GitHub (https://cycle20.github.io/EZCancerTarget/). Then, users can upload their target list with three pieces of information into a Google Spreadsheet (Target INPUT). The first piece (Fig. 5.2 Column A), asks for the HUGO ID. In Column B, users can give a “Label” for every target for classification and clustering useful in later work. The third piece (Fig. 5.2 column C) is the UniProtKB ID of the searched gene. Inputs for the HUGO and Label columns are limited to 12 characters. On the right side of the spreadsheet (columns E-K), hyperlinks provide access to the results page on GitHub, and in the “Results of Update Request” box, users can check the query’s status. Hitting the “Start Rendering” button located on columns E-F starts the query. The area within E1-K8 are protected and automatically overwritten if edited (Fig. 5.2). 4.2 Result Page By clicking on the “Result page” link on the target spreadsheet, we can access the results of our query within approximately 10 minutes. Clicking on the hyperlink in cell H6 we can follow the progress of the query (Fig. 5.2, arrow). A new query overwrites the earlier one in the web application, but every previous version is saved on GitHub under the “Result of Update Request” link (https://github.com/cycle20/EZCancerTarget/actions/workflows/clue.yml). A scrollable panel displays all the targets on the left with at least one valid drug compound available. The software automatically excludes entries where no drug or small molecule inhibitor/agonist is available according to the clue.io repurposing hub. In the first entry of the results list (“Summary”) the evaluation report on the search is accessible. In the “Overview” section, it displays the total number of found compounds for all listed targets and the average number of compounds per target. The amount of found compounds are classified according to their pre- and clinical phase as well. In the “Molecular Background” section details from the retrieved molecular background data is evaluated according to the number of found Reactome or KEGG pathways, STRING interactors and GO molecular functions, subcellular localizations, biological processes. Finally (“Compound” section), every listed target is separately detailed of their compound entries in PubMed, PubChem, ChEMBL and DrugBank. The platform creates a table for every target, where different columns indicate the mechanism of action (MoA), clinical status (preclinical, phase 1, phase 2, phase 3, or launched), and the search resources from PubMed, EMA and the direct entry from clue.io. Furthermore, the query table includes hyperlinks with DrugBank, PubChem, and ChEMBL IDs to quickly access the compounds’ chemical and pharmacological properties (Fig. 5.3). EZCancerTarget also gives a comprehensive, highly structured overview of the selected targets regarding their molecular biology data, including molecular function (Gene Ontology), their connectome (STRING), participation in pathways, and cellular localization (Reactome and KEGG) retrieved from various databases. Hyperlinks to GeneCards and DrugBank Target Search are also available but differently structured as for UniProt entries. The “STRING” entry opens a static STRING map for the target and provides a hyperlink to https://string-db.org (Fig. 5.4). The following entry carries the “Molecular Functions / Subcellular Localizations” title, where the two main hyperlinks (source) lead to UniProt’s “Function” and “Subcellular Localization” pages. Molecular function entries and target localizations are also provided as text separately, where hyperlinks lead to the QuickGo platform to obtain further information about relevant compartment-specific molecular pathways (Fig. 5.4). The last entry named “Pathways” provides links to every Reactome database, where the target’s participation is visualized in every relevant metabolic pathway (Fig. 5.4). The hyperlink to the entry of the KEGG database is also displayed here, without being broken down to individual links to pathways. Supplementary Video 1 shows a short tutorial about the functionality of the program and the main steps to generate a query. "],["figures-and-legends.html", "Chapter 5 Figures and Legends 5.1 Flowchart of functionality 5.2 Input table for molecular targets 5.3 List of drug targets 5.4 Molecular background of druggable targets", " Chapter 5 Figures and Legends 5.1 Flowchart of functionality Flowchart describes the main steps of EZCancerTarget’s functionality, including data input, clue.io target search, cross-referencing in databases (Datapatch) and molecular background information on selected targets (Render). Figure 5.1: Flowchart of functionality 5.2 Input table for molecular targets Users can enter selected targets’ HUGO name (black rectangle), label (blue dashed rectangle) and UniProt ID (green dashed rectangle) in columns A, B and C. Hitting “Start Rendering” will initiate the clue.io search (red arrowhead). Progress can be traced by clicking on hyperlink in cells H6-K6 (black arrow). Clicking on the hyperlink in cell F2-I2 reveals the results page. Figure 5.2: Input table of targets 5.3 List of drug targets Clicking on the labels of selected targets (column on left side) unveils available compound list (black box) describing also mechanism of action (MoA, dashed box), clinical status (red box), resources of information on PubMed (green box) and DrugBank/PubChem/ChEMBL entries (blue box). Figure 5.3: Targets and drugs 5.4 Molecular background of druggable targets Details on the molecular background of druggable targets: Panel A shows the network map from STRING with static string map and hyperlink to STRING DB entry. Panel B displays hyperlinks to “molecular function”, “biological processes” and “subcellular localisation” to browse the UniProt database on molecular background. By clicking directly on the titles, we can access a specific function. Panel C shows hyperlinks to visualize KEGG and Reactome pathways of the selected target. For Reactome, clicking on individual pathway titles we can directly access the infographic of the given pathway. Figure 5.4: Molecular background "]]
